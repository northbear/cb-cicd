pipeline {
    agent any
    triggers {
        pollSCM('H/2 * * * 1-5')
        // properties([
        //     pipelineTriggers([[
        //         $class: 'DockerHubTrigger',
        //         options: [[
        //             $class: 'TriggerOnSpecifiedImageNames',
        //             repoNames: ['northbear/morse-responder'].toSet()
        //         ]]
        //     ]])
        // ])

    }
    options {
        disableConcurrentBuilds()
        timestamps()
    }
    environment {
        registryCredential = 'cb-access-dockerhub'
        serverHost = 'ec2-54-73-110-196.eu-west-1.compute.amazonaws.com'
        serverPortExposed = '5000'

        serverImage = ''
        serverImageName = 'northbear/morse-responder'
        serverContainerName = 'morse-responder'
        
        clientImageName = 'northbear/morse-receiver'
        clientImage = null
        clientContainerName = 'morse-receiver'
    }
    stages {
        stage("Prepare Workspace") {
            steps {
	    	echo 'Prepare'
                git url: 'https://github.com/northbear/cb-ms-morse.git', poll: true
                sh "mkdir -p ./output"
	    }
        }
        stage('Prepare Server Image') {
            steps {
                echo "Prepare image ${serverImageName}"
                script {
                    docker.withRegistry( '', registryCredential ) {
                        dockerImage.push("${env.BUILD_ID}")
                    }
                }
            }
        }
        stage("Build Receiver Image")    {
            steps {
	        echo "Build Image ${clientImageName}"
                script {
                    dockerImage = docker.build(clientImageName, '--rm -f Dockerfile.morse-receiver .')
                }
	    }
        }
        stage("Run Server Container") {
            agent {
                docker {
                    image 'northbear/morse-responder'
                    args "-p ${serverPortExposed}:2000 --env APP_PORT=2000"
                }
            }
            steps {
	    	echo 'Run Server Container'
                sh "./morse-responder"
	    }
        } 
        stage("Run Client Container") {
            agent {
                docker {
                    image 'northbear/morse-receiver'
                    args '-v ./output:/output'
                }
            }
            steps {
	    	echo 'Run client'
                sh "SERVICE_ADDRESS=${serverHost}:${serverPortExposed} ./morse-receiver &>> /output/morse-receiver.log"
	    }
        } 
        stage("Publish Image")  {
            steps {
	    	echo 'Push image to Repo'
	    }
        }
        stage("Clean Up")  {
            steps {
	    	echo 'Remove containers'
                // sh "docker rm -f ${serverContainerName}"
                // sh "docker rm -f ${clientContainerName}"
                // sh "docker rmi ${serverImageName}'
                // sh "docker rmi ${serverImageName}'
	    }
        }
    }
}
