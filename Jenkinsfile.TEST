pipeline {
    agent any
    triggers {
        pollSCM('H/2 * * * 1-5')
        // properties([
        //     pipelineTriggers([[
        //         $class: 'DockerHubTrigger',
        //         options: [[
        //             $class: 'TriggerOnSpecifiedImageNames',
        //             repoNames: ['northbear/morse-responder'].toSet()
        //         ]]
        //     ]])
        // ])

    }
    options {
        disableConcurrentBuilds()
        timestamps()
    }
    environment {
        registryCredential = 'cb-access-dockerhub'
        serverHost = 'ec2-54-73-110-196.eu-west-1.compute.amazonaws.com'
        serverPort = '5000'

        serverImage = null
        serverImageName = 'northbear/morse-responder'
        serverContainerName = 'morse-responder'
        
        clientImageName = 'northbear/morse-receiver'
        clientImage = null
        clientContainerName = 'morse-receiver'
    }
    stages {
        stage("Prepare Workspace") {
            steps {
	    	echo 'Prepare'
                git url: 'https://github.com/northbear/cb-ms-morse.git', poll: true
                sh "docker volume create receiver-output"
	    }
        }
        stage("Build Client Container") {            
            steps {
	    	echo 'Build Client Container'
                script {
                    clientImage = docker.build(clientImageName, '-f Dockerfile.morse-receiver .')
                }
	    }
        } 
        stage('Get Server Container') {
            steps {
                script {
                    serverImage = docker.image(serverImageName)
                }
            }
        }
        stage("Run Container Stack") {
            steps {
	    	echo 'Run Server Container'
                script {
                    serverImage.withRun("-p ${serverPort}:3000 --env APP_PORT=3000") {
                        sh "echo 'execute servercontainer'"
                        clientImage.withRun("-v receiver-output:/output --env SERVICE_ADDRESS=${serverHost}:${serverPort}") {
                            sh "echo 'execute client container'"
                        }
                    }
                }
	    }
        } 
        stage("Get Reponse From Server")  {
            steps {
	    	echo 'Push image to Repo'
                // sh "ls -l output/"
                // sh "cat output/*"
	    }
        }
        stage("Clean Up")  {
            steps {
	    	echo 'Remove containers'
                sh "docker volume rm -f receiver-output"
                // sh "docker rm -f ${serverContainerName}"
                // sh "docker rm -f ${clientContainerName}"
                // sh "docker rmi ${serverImageName}'
                // sh "docker rmi ${serverImageName}'
	    }
        }
    }
}
